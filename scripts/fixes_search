#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
#
# Copyright 2018-2020 Greg Kroah-Hartman <gregkh@linuxfoundation.org>
#
# Dig out patches that are created based on the "Fixes:" tag to match up with
# stuff that is also in the stable trees already.
#
# horribly messy right now, probably really inefficient and slow, and requires
# lots of manual setup and poking around in a mbox file afterward.  Use at your
# own risk...
#
# also is overly-enthusiastic, catching stuff that might not only be fixes in
# stable trees, but that's a good thing for now, we can live with that :)
#

HOME="/home/gregkh/linux"
TMPDIR="/home/gregkh/tmp"
PREFIX="fixes_search_"


#txtund=$(tput sgr 0 1)    # Underline
#txtbld=$(tput bold)       # Bold
txtred=$(tput setaf 1)    # Red
txtgrn=$(tput setaf 2)    # Green
txtylw=$(tput setaf 3)    # Yellow
txtblu=$(tput setaf 4)    # Blue
txtpur=$(tput setaf 5)    # Purple
txtcyn=$(tput setaf 6)    # Cyan
#txtwht=$(tput setaf 7)    # White
txtrst=$(tput sgr0)       # Text reset


DEBUG=1

BASE_KERNEL=$1
git_range=$2

usage()
{
	echo "$0: error, wrong arguments"
	echo "usage:"
	echo "	$0 BASE_KERNEL_VERSION GIT_RANGE"
	exit 1
}

if [ "${BASE_KERNEL}" == "" ] ; then
	usage
fi

if [ "${git_range}" == "" ] ; then
	usage
fi



TMP_PREFIX="${TMPDIR}/${PREFIX}"
STABLE_KERNEL="${HOME}/stable/linux-${BASE_KERNEL}.y"
LATEST_KERNEL="${HOME}/gregkh"
STABLE_QUEUE="${HOME}/stable/stable-queue"


spin_i=1
spin()
{
	sp="/-\|"
	printf "\b${sp:spin_i++%${#sp}:1}"
}

logn()
{
	if [[ ${DEBUG} -ge 1 ]] ; then
		echo -n "$1"
	else
		spin
	fi
}
log()
{
	if [[ ${DEBUG} -ge 1 ]] ; then
		echo "$1"
	else
		spin
	fi
}
dbg()
{
	if [[ ${DEBUG} -ge 2 ]] ; then
		log "$1"
	fi
}

save_commit()
{
	local commit version mbox
	commit=$1
	version=$2
	mbox=$3

	log "${txtylw}in ${version} release, SAVING!${txtrst}"
	git show --pretty=email "${commit}" | sed -e "s/\[PATCH\]/\[PATCH ${version}\]/" >> "${mbox}"
}

cd "${STABLE_KERNEL}" || exit 1
stable_log=$(git log v"${BASE_KERNEL}"..HEAD)

cd "${STABLE_QUEUE}" || exit 1
queue_data=$(cat queue*/*)

log "${txtcyn}Looking at ${txtylw}${BASE_KERNEL}${txtcyn} for fixes in range from ${txtylw}${git_range}${txtrst}"

log "${txtcyn}Building releases file...${txtrst}"
RELEASES=$(mktemp ${TMP_PREFIX}releases.XXXXXX) || exit 1
git grep "commit" releases/ >> "${RELEASES}"

cd "${LATEST_KERNEL}" || exit 1
MBOX=$(mktemp ${TMP_PREFIX}mbox.XXXXXX) || exit 1


# process of digging stuff out:
# loop through all commits in ${git_range}
#   if commit is already in stable log, ignore
#   if commit has a "Fixes:" tag
#      see if Fixes: is for something in a released .y
#        if so, save it
#      see if Fixes: is for a .0 release
#        if so, save it

cd "${LATEST_KERNEL}" || exit 1
for commit in $(git rev-list --reverse --no-merges "${git_range}"); do
	# logn "commit = ${txtgrn}${commit}${txtrst}	"
	logn "${txtgrn}${commit}${txtrst}	"

	# Try to find "Fixes" tag in commit
	fixes_lines=$(git log -1 --format='%B' "${commit}" | grep -i '^[[:space:]]*Fixes:')
	if [ "${fixes_lines}" == "" ] ; then
		log "${txtblu}no Fixes:${txtrst}"
		continue
	fi

	# see if commit is already in the stable log
	if [[ "${stable_log}" =~ ${commit} ]] ; then
		log "${txtred}present in stable, ignoring${txtrst}"
		continue
	fi

	# see if it already is in the current queue
	if [[ "${queue_data}" =~ ${commit} ]] ; then
		log "${txtred}present in stable queue, ignoring${txtrst}"
		continue
	fi

	dbg "	fixes_lines=		${txtblu}'${fixes_lines}'${txtrst}"
	while read -r fix_line; do
		# Grab the fix commit id out of the line
		if [[ ${fix_line} =~ [[:xdigit:]]{12} ]] ; then
			fix_commit="${BASH_REMATCH[0]}"
		else
			dbg "	${txtred}try 2 to find the fixes line!"
			fix_commit=$(echo "${fix_line}" | sed -e 's/^[ \t]*//' | cut -f 2 -d ':' | sed -e 's/^[ \t]*//' | cut -f 1 -d ' ')
		fi
		if [ "${fix_commit}" == "" ] ; then
			log "	${txtred}Can not find fix commit id in ${fix_line}"
			continue
		fi

		fix_commit_full=$(git log -1 --format="%H" "${fix_commit}")
		dbg "	fix_commit=		${txtblu}'${fix_commit}'${txtrst}"
		dbg "	fix_commit_full=	${txtblu}'${fix_commit_full}'${txtrst}"
		if [ "${fix_commit_full}" == "" ] ; then
			log "	${txtred}invalid fix_commit_full${txtrst}"
			continue
		fi

		# we have a commit id that this commit "fixes" so now we need to see if what it fixes is in a .y release
		#stable_included=$(cd /home/gregkh/linux/stable/stable-queue && git grep "${fix_commit_full}")
		#cd "${LATEST_KERNEL}"
		stable_included=$(grep "${fix_commit_full}" "${RELEASES}")
		dbg "	stable_included=	${txtblu}'${stable_included}'${txtrst}"
		if [ "${stable_included}" != "" ] ; then
			# stable_included is X number of lines, of format
			# "releases/X.Y.Z/filename.patch:more and more text"
			# split it up so we can just fine X.Y.Z
			while IFS= read -r version; do
				v=$(echo "${version}" | cut -f 2 -d '/')
				echo "v=\"${v}\""
				save_commit "${commit}" "${v}" "${MBOX}"
			done <<< "${stable_included}"
			# don't call continue here, we want to see if they are
			# in a .0 release as well.
		fi

		# see if commit id it fixes is in a .0 release
		real_release=$(cd /home/gregkh/kernel-history/logs && git grep -l "${fix_commit_full}")
		cd "${LATEST_KERNEL}" || exit 1
		dbg "	real_release=		'${real_release}'"
		if [ "${real_release}" != "" ] ; then
			# "real_release" multiple lines in format "log-X.Y" so let's grab
			# the kernel version out so we can use it
			while IFS= read -r version; do
				v=$(echo "${version}" | cut -f 2 -d '-')
				save_commit "${commit}" "${v}" "${MBOX}"
			done <<< "${real_release}"
			continue
		fi

		log "${txtpur}Fix not present in released kernel${txtrst}"

	done <<< "${fixes_lines}"

done

rm "${RELEASES}"

echo "# commits are in ${MBOX}"
echo "mutt -f ${MBOX}"
