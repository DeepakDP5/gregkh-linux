#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
#
# Copyright 2018 Greg Kroah-Hartman <gregkh@linuxfoundation.org>
#
# Dig out patches that are created based on the "Fixes:" tag to match up with
# stuff that is also in the stable trees already.
#
# horribly messy right now, probably really inefficient and slow, and requires
# lots of manual setup and poking around in a mbox file afterward.  Use at your
# own risk...
#
# also is overly-enthusiastic, catching stuff that might not only be fixes in
# stable trees, but that's a good thing for now, we can live with that :)
#

HOME="/home/gregkh/linux"
TMPDIR="/home/gregkh/tmp"
PREFIX="fixes_search_"


txtund=$(tput sgr 0 1)    # Underline
txtbld=$(tput bold)       # Bold
txtred=$(tput setaf 1)    # Red
txtgrn=$(tput setaf 2)    # Green
txtylw=$(tput setaf 3)    # Yellow
txtblu=$(tput setaf 4)    # Blue
txtpur=$(tput setaf 5)    # Purple
txtcyn=$(tput setaf 6)    # Cyan
txtwht=$(tput setaf 7)    # White
txtrst=$(tput sgr0)       # Text reset

TMP_PREFIX="${TMPDIR}/${PREFIX}"

BASE_KERNEL="5.4"

#KERNEL_RANGE="v4.9..v4.10"
#KERNEL_RANGE="v4.14..v4.15"
#KERNEL_RANGE="v4.17..v4.18"
#KERNEL_RANGE="v4.15..v4.16"
#KERNEL_RANGE="v5.0..v5.1"
#KERNEL_RANGE="v5.1..v5.2"
#KERNEL_RANGE="v5.2..v5.3"
#KERNEL_RANGE="v4.19..v5.3"
#KERNEL_RANGE="v5.3-rc3..v5.3-rc4"
#KERNEL_RANGE="v5.4..HEAD"
#KERNEL_RANGE="v5.5-rc3..HEAD"
#KERNEL_RANGE="v5.5-rc1..v5.5-rc2"

STABLE_KERNEL="${HOME}/stable/linux-${BASE_KERNEL}.y"
#STABLE_KERNEL="${HOME}/stable/linux-4.14.y"
LATEST_KERNEL="${HOME}/gregkh"

STABLE_QUEUE="${HOME}/stable/stable-queue"

DEBUG=1

git_range=$1

if [ "${git_range}" == "" ] ; then
	echo "error, git range not found"
	echo "usage:"
	echo "	$0 GIT_RANGE"
	exit 1
fi


i=1
spin()
{
	sp="/-\|"
	printf "\b${sp:i++%${#sp}:1}"
}

logn()
{
	if [[ ${DEBUG} -eq 1 ]] ; then
		echo -n "$1"
	else
		spin
	fi
}
log()
{
	if [[ ${DEBUG} -eq 1 ]] ; then
		echo "$1"
	else
		spin
	fi
}


cd "${STABLE_KERNEL}" || exit 1
stable_log=$(git log v${BASE_KERNEL}..HEAD)

cd "${STABLE_QUEUE}" || exit 1
queue_data=$(cat queue*/*)

log "Building releases file..."
RELEASES=$(mktemp ${TMP_PREFIX}releases.XXXXXX) || exit 1
git grep "commit" releases/ >> "${RELEASES}"

cd "${LATEST_KERNEL}" || exit 1
MBOX=$(mktemp ${TMP_PREFIX}mbox.XXXXXX) || exit 1


# process of digging stuff out:
# loop through all commits in ${git_range}
#   if commit is already in stable log, ignore
#   if commit has a "Fixes:" tag
#      see if Fixes: is for something in a released .y
#        if so, save it
#      see if Fixes: is for a .0 release
#        if so, save it

cd "${LATEST_KERNEL}" || exit 1
for commit in $(git rev-list --reverse --no-merges "${git_range}"); do
	logn "commit = ${txtgrn}${commit}${txtrst}	"

	# see if commit is already in the stable log
	if [[ "${stable_log}" =~ "${commit}" ]] ; then
		log "${txtred}present in stable, ignoring${txtrst}"
		continue
	fi

	# see if it already is in the current queue
	if [[ "${queue_data}" =~ "${commit}" ]] ; then
		log "${txtred}present in stable queue, ignoring${txtrst}"
		continue
	fi
	log "${txtpur}not present${txtrst}"

	# Try to find "Fixes" tag in commit
	fixes_lines=$(git log -1 --format='%B' "${commit}" | grep -i '^[[:space:]]*Fixes:')
	if [ "${fixes_lines}" == "" ] ; then
		continue
	fi
	log "	fixes_lines=		${txtblu}'${fixes_lines}'${txtrst}"
	while read -r fix_line; do
		[[ ${fix_line} =~ [[:xdigit:]]{12} ]]
		fix_commit="${BASH_REMATCH[0]}"
		fix_commit_full=$(git log -1 --format="%H" "${fix_commit}")
		log "	fix_commit=		${txtblu}'${fix_commit}'${txtrst}"
		log "	fix_commit_full=	${txtblu}'${fix_commit_full}'${txtrst}"
		if [ "${fix_commit_full}" == "" ] ; then
			log "	invalid fix_commit_full"
			continue
		fi

		# we have a commit id that this commit "fixes" so now we need to see if what it fixes is in a .y release
		#stable_included=$(cd /home/gregkh/linux/stable/stable-queue && git grep "${fix_commit_full}")
		#cd "${LATEST_KERNEL}"
		stable_included=$(grep "${fix_commit_full}" "${RELEASES}")
		log "	stable_included=	${txtblu}'${stable_included}'${txtrst}"
		if [ "${stable_included}" != "" ] ; then
			log "	${txtylw}SAVING ${commit}!${txtrst}"
			git show --pretty=email "${commit}" >> "${MBOX}"
			continue
		fi

		# see if commit id it fixes is in a .0 release
		real_release=$(cd /home/gregkh/kernel-history/logs && git grep "${fix_commit_full}")
		cd "${LATEST_KERNEL}" || exit 1
		log "	real_release=		'${real_release}'"
		if [ "${real_release}" != "" ] ; then
			log "	${txtylw}SAVING ${commit}!${txtrst}"
			git show --pretty=email "${commit}" >> "${MBOX}"
			continue
		fi

	done <<< "${fixes_lines}"

done

rm "${RELEASES}"

echo "# commits are in ${MBOX}"
echo "mutt -f ${MBOX}"
