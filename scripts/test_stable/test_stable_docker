#!/bin/bash
#
# Testing script to take a stable kernel patch set, build it on a remote
# machine using ktest, and email back the results.
#
# Copyright 2012 Greg Kroah-Hartman <gregkh@linuxfoundation.org>
#
# Released under the GPLv2 only.
#
#
# Some variables you might want to mess with are:
#
# EMAIL:        Who to send the email to.
# LOCAL_WORK:       Temporary location on the local machine to create some
#           files before we copy them to the remote machine.
# LOCAL_KTEST:      Local location of a version of ktest.pl that you want
#           to run remotely (usually better than the version in the
#           stable tree under testing due to age issues.)
# STABLE_QUEUE_DIR:        Local location of the stable-queue git tree we are
#           wanting to test.
# REMOTE:       The server name you want to use, this lets you set all
#           of the REMOTE_* options in an easier manner.
# REMOTE_STABLE_GIT:    On the remote machine (to docker), where the linux-stable git tree
#           is located
# REMOTE_WORK:      On the remote machine, what temporary location we can
#           use to create a subdirectory and do our work in.
# REMOTE_SERVER:    The remote machine name.
# REMOTE_USER:      The username to run the script on the remote machine
# SSH_OPTIONS:      Options to pass to ssh to access the remote machine

EMAIL="herlo@linuxfoundation.org"

# hard code REMOTE_DIR and NUM_PROCESSORS for now
# docker values might differ later

REMOTE_DIR=/docker
NUM_PROCESSORS=1

GIT="/usr/bin/git"
WGET="/usr/bin/wget"

LOCAL_WORK="/tmp"
SCRIPT_HOME=`mktemp -d ${LOCAL_WORK}/stable_test_XXXXX` || exit 1

STABLE_QUEUE_DIR="${REMOTE_DIR}/stable-queue"
STABLE_QUEUE_GITURL="git://git.kernel.org/pub/scm/linux/kernel/git/stable/stable-queue.git"

KTEST_DIR="${SCRIPT_HOME}/ktest"
KTEST_GITURL="git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git"
KTEST_URL="http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/tools/testing/ktest/ktest.pl?id=HEAD"

LINUX_STABLE_DIR="${REMOTE_DIR}/linux-stable"
LINUX_STABLE_GITURL="git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git"

DOCKER="/usr/bin/docker"


#######################################################
# I doubt you need to touch anything below this line,
# unless you want to fix my bugs, or rewrite the scripts
# to be saner (hint, feel free to do so...)
#######################################################

# grab the kernel version from the command line
KERNEL_VERSION="$1"

if [ "${KERNEL_VERSION}" == "" ] ; then
    echo "$0 KERNEL_VERSION"
    exit;
fi

echo "Using ${SCRIPT_HOME} for our local files"
echo
echo "Testing kernel version ${KERNEL_VERSION} with docker"

if [ ! -d ${KTEST_DIR} ]; then
    mkdir -p ${KTEST_DIR}
fi
#    ${GIT} clone ${KTEST_GITURL} ${KTEST_DIR}
#else
#    pushd ${KTEST_DIR} &> /dev/null
#    ${GIT} pull origin master
#    popd &> /dev/null

# wget the ktest.pl
# It's faster than cloning the whole linux repo
${WGET} -q ${KTEST_URL} -O ${KTEST_DIR}/ktest.pl

# clone linux-stable
if [ ! -d ${LINUX_STABLE_DIR} ]; then
    mkdir -p ${LINUX_STABLE_DIR}
    ${GIT} clone ${LINUX_STABLE_GITURL} ${LINUX_STABLE_DIR}
fi

pushd ${LINUX_STABLE_DIR} &> /dev/null
${GIT} checkout linux-${KERNEL_VERSION}.y
${GIT} fetch
popd &> /dev/null

# clone stable-queue
if [ ! -d ${STABLE_QUEUE_DIR} ]; then
    mkdir -p ${STABLE_QUEUE_DIR}
    ${GIT} clone ${STABLE_QUEUE_GITURL} ${STABLE_QUEUE_DIR}
else
    pushd ${STABLE_QUEUE_DIR} &> /dev/null
    ${GIT} pull origin master
    popd &> /dev/null
fi

# tar up stable patch queue for just this kernel version
if [ -d ${STABLE_QUEUE_DIR}/queue-${KERNEL_VERSION} ] ; then
    cd ${STABLE_QUEUE_DIR}/queue-${KERNEL_VERSION}/ || exit 1
    tar -c . | gzip > ${SCRIPT_HOME}/stable_queue.tar.gz
    TARBALL=1
else
    echo "No stable queue at this point in time, are you sure you picked the right kernel version?"
    TARBALL=0
fi

# create the script to run remotely

cat << __EOF__ > ${SCRIPT_HOME}/run_test.sh
#!/bin/bash
# Test script for the ${KERNEL_VERSION}-stable kernel
# autogenerated, do not edit by hand
#
PATCHES="stable_queue.tar.gz"

echo "Starting to test kernel version ${KERNEL_VERSION}"
echo ""

# create the linux clone with the correct branch
git clone -q -s --branch linux-${KERNEL_VERSION}.y ${LINUX_STABLE_DIR} ${REMOTE_DIR}/linux
cd ${REMOTE_DIR}/linux

# create a patches/ directory for the stable patches to apply if we have them
if [ -f ${REMOTE_DIR}/\${PATCHES} ] ; then
    mkdir patches
    cd patches
    tar -zxvf ${REMOTE_DIR}/\${PATCHES}
    cd ..

    # Apply the patch queue
    QUILT_PATCHES=patches QUILT_SERIES=patches/series quilt push -aq --quiltrc
fi

# get initial time
TIME=\$(date +%s)

# build stuff
../ktest.pl ../ktest.conf

KTEST_RUN=\$?
echo "KTEST_RUN = \${KTEST_RUN}"

# get time it took to do the build
TIME="\$((\$(date +%s)-TIME))"

echo "Took \${TIME} seconds to build"

cd ..

if [ "\${KTEST_RUN}" = "0" ]; then
    # test succeeded
    SUBJECT="Build of ${KERNEL_VERSION} was good (\${TIME} seconds)"
else
    SUBJECT="Build of ${KERNEL_VERSION} FAILED! (\${TIME} seconds)"
fi

mutt -s "\${SUBJECT}" -a linux/log -- ${EMAIL} < ${REMOTE_DIR}/output_log

# now that we are done, clean up after ourselves

__EOF__

# create the ktest.conf file
cat <<__EOF__ > ${KTEST_DIR}/ktest.conf
TEST_START
TEST_TYPE = build

DEFAULTS
BUILD_TYPE = allmodconfig
OUTPUT_DIR = \${PWD}/output
LOG_FILE = \${PWD}/log
LOCALVERSION = -test
BUILD_OPTIONS = -j${NUM_PROCESSORS}
MACHINE = aws
BUILD_DIR = \${PWD}
__EOF__


cat <<__EOF__ > ${SCRIPT_HOME}/run_the_test
#!/bin/bash
${REMOTE_DIR}/run_test.sh | tee ${REMOTE_DIR}/output_log
__EOF__

# put all of the pieces into a Dockerfile

# create the Dockerfile
cat <<__EOF__ > ${SCRIPT_HOME}/Dockerfile
FROM herlolf/fedora:20
MAINTAINER Clint Savage <herlo@linuxfoundation.org>

ADD /ktest/ktest.conf ${REMOTE_DIR}/ktest.conf
ADD /ktest/ktest.pl ${REMOTE_DIR}/ktest.pl
RUN chmod +x ${REMOTE_DIR}/ktest.pl

ADD /run_the_test ${REMOTE_DIR}/run_the_test
RUN chmod +x ${REMOTE_DIR}/run_the_test

ADD /run_test.sh ${REMOTE_DIR}/run_test.sh
RUN chmod +x ${REMOTE_DIR}/run_test.sh

ADD /stable_queue.tar.gz ${SCRIPT_HOME}/stable_queue.tar.gz

__EOF__

pushd ${SCRIPT_HOME} &> /dev/null
DATE=$(date +%Y%m%d%H%M)
${DOCKER} build -t lf_kernel-test:${DATE} ${SCRIPT_HOME}

echo "Running docker build lf/kernel-test:${DATE}"

echo ${DOCKER} run -it -v ${LINUX_STABLE_DIR}:${LINUX_STABLE_DIR}:ro lf_kernel-test:${DATE} "${REMOTE_DIR}/run_the_test"

popd &> /dev/null

exit


